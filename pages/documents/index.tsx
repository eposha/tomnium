import Head from 'next/head';
import type {GetServerSideProps, NextPage} from 'next';
import {CategoryEntityType, DocumentField, SortType} from 'src/graphql.schema';
import {useRouter} from 'next/router';
import {DOCUMENTS} from '@/query/documents/documentsList';
import {CATEGORY_TYPES} from '@/query/categories';
import {initApollo} from 'src/lib/apolloClient';
import {DocumentCard} from 'src/components/documents';
import {useDocuments} from '@/graph-hooks/documents';
import {useFilterList} from 'src/hooks';
import Pagination from 'src/components/common/pagination';
import {FilterType} from '@/components/common/filter-list/FilterList';
import {Media} from 'src/media-styles';
import {IGetDocumentsResponse} from '@/graph-hooks/documents/useDocuments';

import * as UI from 'styles/documents';

import dynamic from 'next/dynamic';
import {useFaqsFromDirectories} from '@/graph-hooks/faqs/useFaqsFromDirectories';
import {useFaqs} from '@/graph-hooks/faqs/useFaq';
import {FAQ_TYPES} from '@/constants/faqs';
import {FaqContainer} from 'styles/consultations/page';
import {FAQ} from 'styles/courses';
import {AccordionItem} from '@/components/common/AccordionItem';
import {Text} from 'styles/common';

const FilterList = dynamic(
  import('src/components/common/filter-list/FilterList'),
);

interface IDocuments {
  ssrDocuments: IGetDocumentsResponse;
  categories: {
    displayName: string;
    id: string;
  }[];
}

const Documents: NextPage<IDocuments> = ({ssrDocuments, categories}) => {
  const router = useRouter();
  const {
    query: {filterList, offset},
  } = router;

  const documentsFilter = {
    categoryIds: filterList,
    type: [
      'DOCUMENT_TYPE_ARTICLE',
      'DOCUMENT_TYPE_NEWS',
      'DOCUMENT_TYPE_WEBINAR',
      'DOCUMENT_TYPE_COURSE',
      'DOCUMENT_TYPE_LESSON',
      'DOCUMENT_TYPE_LIVE',
      'DOCUMENT_TYPE_EXTERNAL_VIDEO',
      'DOCUMENT_TYPE_FILE',
    ],
  };

  const {documents, loading} = useDocuments({
    filter: documentsFilter,
    offset: offset ? (+offset - 1) * 10 : undefined,
    sort: {
      field: DocumentField.DocumentFieldIndex,
      type: SortType.SortTypeAsc,
    },
  });

  const {handleFilterRoute} = useFilterList({
    filterList,
  });

  const filtersData = {
    type: 'primary' as FilterType,
    title: 'Категории',
    filterItems: categories,
    handleFilterRoute,
  };

  const renderDocumentData = loading ? ssrDocuments : documents;

  const {faqId} = useFaqsFromDirectories(FAQ_TYPES.FAQ_TYPE_DOCUMENT);
  const {faqs} = useFaqs(faqId);

  return (
    <>
      <Head>
        <title>Woman Insight</title>
        <meta name='description' content='Generated by create next app' />
      </Head>

      <UI.FreeWrapper>
        <Media greaterThan={'xs'}>
          <FilterList filtersData={filtersData} filterList={filterList} />
        </Media>
        <UI.CardListWrapper>
          <UI.DocumentsWrapper>
            {/* @ts-ignore */}
            {renderDocumentData?.Documents.map((documentData) => (
              <DocumentCard key={documentData.id} documentData={documentData} />
            ))}
          </UI.DocumentsWrapper>
          <Pagination
            //  @ts-ignore
            pagination={renderDocumentData?.Pagination}
          />
          {faqs && (
            <FaqContainer>
              <Text fontSize='20px'>Часто задаваемые вопросы</Text>
              <FAQ>
                {faqs?.FaqOptions?.map((item, index) => (
                  <AccordionItem item={item} key={`${item.title}_${index}`} />
                ))}
              </FAQ>
            </FaqContainer>
          )}
        </UI.CardListWrapper>
      </UI.FreeWrapper>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const {
    res,
    query: {filterList, offset},
  } = ctx;

  const variables = {
    filter: {
      categoryIds: filterList,
      type: [
        'DOCUMENT_TYPE_ARTICLE',
        'DOCUMENT_TYPE_NEWS',
        'DOCUMENT_TYPE_WEBINAR',
        'DOCUMENT_TYPE_COURSE',
        'DOCUMENT_TYPE_LESSON',
        'DOCUMENT_TYPE_LIVE',
        'DOCUMENT_TYPE_EXTERNAL_VIDEO',
        'DOCUMENT_TYPE_FILE',
      ],
    },
    offset: offset ? (+offset - 1) * 10 : undefined,
    sort: {
      field: DocumentField.DocumentFieldIndex,
      type: SortType.SortTypeAsc,
    },
  };

  const apolloClient = initApollo();

  const {
    data: {categories},
  } = await apolloClient.query({
    query: CATEGORY_TYPES,
    variables: {filter: {type: CategoryEntityType.CategoryEntityTypeDocument}},
  });

  const {
    data: {documents},
  } = await apolloClient.query({
    query: DOCUMENTS,
    variables,
  });

  res.setHeader(
    'Cache-Control',
    `public, s-maxage=10, stale-while-revalidate=18000`,
  );
  return {
    props: {ssrDocuments: documents, categories},
  };
};

export default Documents;
