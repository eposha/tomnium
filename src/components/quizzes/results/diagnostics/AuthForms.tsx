import {Dispatch, FC, SetStateAction} from 'react';
import {useRouter} from 'next/router';

import {useRegister} from '@/graph-hooks/auth/useRegister';
import {useLogin} from '@/graph-hooks/auth/useLogin';

import {Socials} from '@/components/auth';

import {
  LoginForm as Form,
  InputWrapper,
  Input,
  ErrorInfo,
  SubmitWrapper,
  SubmitButton,
  ResetPasswordLink,
} from 'styles/auth/common';
import {
  AuthWrapper,
  AuthHeading,
  AuthDescription,
  HighlightedText,
} from 'styles/quizzes/results/partial-diagnostics-results';
import * as UI from 'styles/quizzes/results/diagnostics-auth';
import {destroyCookie} from 'nookies';
import {AUTOGENERATED_TOKEN_NAME} from '@/lib/apolloClient';

interface IRegistrationForm {
  setShowRegister: Dispatch<SetStateAction<boolean>>;
}

export const RegistrationForm: FC<IRegistrationForm> = ({setShowRegister}) => {
  const router = useRouter();
  const {quizId, type} = router.query;
  const {register, loading, onSubmit, formErrors, responseError} = useRegister({
    generatePassword: false,
    onSuccess: () => {
      destroyCookie(null, AUTOGENERATED_TOKEN_NAME);

      router.push(`/quizzes/${quizId}/start?type=${type}`);
    },
  });

  return (
    <AuthWrapper>
      <UI.CloseIconWrapper onClick={() => setShowRegister(false)}>
        <UI.CloseIcon />
      </UI.CloseIconWrapper>
      <AuthHeading>
        Давайте продолжим и проведем{' '}
        <HighlightedText>подробный анализ</HighlightedText> каждой из областей!
      </AuthHeading>
      <AuthDescription>
        Пожалуйста, укажите ваше имя email, на который мы отправим результаты
        диагностики после ее завершения.
      </AuthDescription>

      <Form onSubmit={onSubmit} autoComplete='off'>
        {responseError && (
          <ErrorInfo top={'-20px'} left={'50%'} $transform>
            {responseError.message}
          </ErrorInfo>
        )}
        <InputWrapper>
          <Input
            autoComplete='off'
            placeholder={'Имя фамилия'}
            $isError={!!formErrors.fullName}
            {...register('fullName', {
              required: 'Поле не может быть пустым',
            })}
          />
          {formErrors.fullName && (
            <ErrorInfo>{formErrors.fullName.message}</ErrorInfo>
          )}
        </InputWrapper>
        <InputWrapper>
          <Input
            autoComplete='off'
            type='email'
            placeholder={'Email'}
            $isError={!!formErrors.email}
            {...register('email', {
              required: 'Поле email не может быть пустым',
              pattern: {
                value: /\S+@\S+\.\S+/,
                message: 'Entered value does not match email format',
              },
            })}
          />
          {formErrors.email && (
            <ErrorInfo>{formErrors.email.message}</ErrorInfo>
          )}
        </InputWrapper>

        <InputWrapper>
          <Input
            autoComplete='off'
            type='text'
            placeholder='Пароль'
            $isError={!!formErrors.password}
            {...register('password', {required: 'Введите пароль'})}
          />
          {formErrors.password && (
            <ErrorInfo>{formErrors.password.message}</ErrorInfo>
          )}
        </InputWrapper>
        <SubmitWrapper>
          <SubmitButton type='submit' $isDisabled={loading} $fullWidth>
            Регистрация
          </SubmitButton>
        </SubmitWrapper>
        <AuthDescription textAlign='left'>
          Нажимая на кнопку я соглашаюсь на обработку персональных данных и с
          правилами использования Платформой.
        </AuthDescription>
      </Form>
    </AuthWrapper>
  );
};

interface ILoginForm {
  setShowLogin: Dispatch<SetStateAction<boolean>>;
}

export const LoginForm: FC<ILoginForm> = ({setShowLogin}) => {
  const router = useRouter();
  const {quizId, type} = router.query;

  const {register, formErrors, loading, onSubmit, responseError} = useLogin({
    onSuccess: () => {
      destroyCookie(null, AUTOGENERATED_TOKEN_NAME);
      router.push(`/quizzes/${quizId}/start?type=${type}`);
    },
  });

  return (
    <AuthWrapper>
      <UI.CloseIconWrapper onClick={() => setShowLogin(false)}>
        <UI.CloseIcon />
      </UI.CloseIconWrapper>
      <AuthHeading>Авторизуйтесь и мы продолжим диагностику!</AuthHeading>
      <AuthDescription>
        Пожалуйста, укажите ваше имя email, на который мы отправим результаты
        диагностики после ее завершения.
      </AuthDescription>

      <UI.SocialsWrapper>
        <Socials />
      </UI.SocialsWrapper>
      <Form onSubmit={onSubmit} autoComplete='off'>
        {responseError && (
          <ErrorInfo top={'-20px'} left={'50%'} $transform>
            {responseError.message}
          </ErrorInfo>
        )}

        <InputWrapper>
          <Input
            autoComplete='off'
            type='email'
            placeholder={'Email'}
            $isError={formErrors.login}
            {...register('login', {
              required: 'Поле email не может быть пустым',
              pattern: {
                value: /\S+@\S+\.\S+/,
                message: 'Entered value does not match email format',
              },
            })}
          />
          {formErrors.login && (
            <ErrorInfo>{formErrors.login.message}</ErrorInfo>
          )}
        </InputWrapper>

        <InputWrapper>
          <Input
            autoComplete='off'
            type={'password'}
            placeholder={'Password'}
            $isError={formErrors.password}
            {...register('password', {required: 'Введите пароль'})}
          />
          {formErrors.password && (
            <ErrorInfo>{formErrors.password.message}</ErrorInfo>
          )}
        </InputWrapper>
        <SubmitWrapper>
          <ResetPasswordLink
            type={'button'}
            onClick={() => router.push('/auth/reset')}>
            Забыли пароль?
          </ResetPasswordLink>
          <SubmitButton type='submit' $isDisabled={loading} width={160}>
            Войти
          </SubmitButton>
        </SubmitWrapper>
        <AuthDescription textAlign='left'>
          Нажимая на кнопку я соглашаюсь на обработку персональных данных и с
          правилами использования Платформой.
        </AuthDescription>
      </Form>
    </AuthWrapper>
  );
};
