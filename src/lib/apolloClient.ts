import {useMemo} from 'react';
import nookies, {parseCookies} from 'nookies';
import type {GetServerSidePropsContext} from 'next';
import type {NormalizedCacheObject} from '@apollo/client';

import type {AppProps} from 'next/app';
import {ApolloClient, InMemoryCache, from, split} from '@apollo/client';
import {createUploadLink} from 'apollo-upload-client';
import {setContext} from '@apollo/client/link/context';
import {onError} from '@apollo/client/link/error';
import {getMainDefinition} from '@apollo/client/utilities';

import {WebSocketLink} from '@apollo/client/link/ws';

// import {GraphQLWsLink} from '@apollo/client/link/subscriptions';
// import {createClient} from 'graphql-ws';
// import Router from 'next/router';
// import merge from 'deepmerge';
// import isEqual from 'lodash/isEqual';

export const APOLLO_STATE_PROPERTY_NAME = '__APOLLO_STATE__';
export const COOKIES_TOKEN_NAME = 'DNA_TOKEN';
export const DNA_TOKEN_FROM_ADMIN = 'DNA_TOKEN_FROM_ADMIN';
export const AUTOGENERATED_TOKEN_NAME = 'AUTOGENERATED_TOKEN';

const getCookie = (nameCookie: string, ctx?: GetServerSidePropsContext) => {
  const parsedCookie = ctx ? nookies.get(ctx) : parseCookies();
  return parsedCookie[nameCookie];
};

let apolloClient: ApolloClient<NormalizedCacheObject> | null = null;

const errorLink = onError(({graphQLErrors, networkError}) => {
  if (graphQLErrors) {
    graphQLErrors.forEach(({message, locations, path}) => {
      // if (typeof window !== 'undefined' && message === 'Not authenticated') {
      //   Router.push('/auth/login');
      //   return;
      // }
      console.log(
        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,
      );
    });
  }

  if (networkError) console.log(`[Network error]: ${networkError}`);
});

const createApolloClient = (ctx?: GetServerSidePropsContext) => {
  const uploadLink = createUploadLink({
    uri: process.env.NEXT_PUBLIC_GRAPH_API_URL,
    credentials: 'same-origin',
  });

  const wsLink =
    process.browser && process.env.NEXT_PUBLIC_GRAPH_API_URL
      ? new WebSocketLink({
          uri: process.env.NEXT_PUBLIC_GRAPH_API_URL.replace('https', 'wss'),
          options: {
            connectionParams: () => ({
              Authorization: `Bearer ${getCookie(COOKIES_TOKEN_NAME)}`,
            }),
          },
        })
      : null;

  const splitLink =
    process.browser && wsLink
      ? split(
          ({query}) => {
            const definition = getMainDefinition(query);
            return (
              definition.kind === 'OperationDefinition' &&
              definition.operation === 'subscription'
            );
          },
          wsLink,
          uploadLink,
        )
      : uploadLink;

  const authLink = setContext((_, {headers}) => {
    // Get the authentication token from cookies
    const token = getCookie(COOKIES_TOKEN_NAME, ctx);
    const autoGeneratedToken = getCookie(AUTOGENERATED_TOKEN_NAME, ctx);

    return {
      headers: {
        ...headers,
        authorization: token ? `Bearer ${token}` : '',
        autogeneratedtoken: autoGeneratedToken ? autoGeneratedToken : '',
        'set-cookie': `languageCode=${getCookie('languageCode', ctx)}`,
      },
    };
  });

  // const cache: InMemoryCache = new InMemoryCache({
  //   typePolicies: {
  //     Query: {
  //       fields: {
  //         documents: {
  //           keyArgs: false,
  //           merge(existing, incoming) {
  //             let documents: Reference[] = [];
  //             if (existing && existing.documents) {
  //               documents = documents.concat(existing.documents);
  //             }
  //             if (incoming && incoming.documents) {
  //               documents = documents.concat(incoming.documents);
  //             }
  //             return {
  //               ...incoming,
  //               documents,
  //             };
  //           },
  //         },
  //       },
  //     },
  //   },
  // });

  return new ApolloClient({
    ssrMode: typeof window === 'undefined',
    link: from([errorLink, authLink, splitLink]),
    cache: new InMemoryCache(),
  });
};

export function initApollo(
  initialState: NormalizedCacheObject | null = null,
  ctx?: GetServerSidePropsContext,
) {
  const client = apolloClient ?? createApolloClient(ctx);

  // If your page has Next.js data fetching methods that use Apollo Client,
  // the initial state gets hydrated here
  if (initialState) {
    // Get existing cache, loaded during client side data fetching
    const existingCache = client.extract();

    const newData = {...existingCache, ...initialState};
    // Merge the existing cache into data passed from getStaticProps/getServerSideProps
    // const data = merge(initialState, existingCache, {
    //   // combine arrays using object equality (like in sets)
    //   arrayMerge: (destinationArray, sourceArray) => {
    //     return [
    //       ...sourceArray,
    //       ...destinationArray.filter((d) =>
    //         sourceArray.every((s) => !isEqual(d, s)),
    //       ),
    //     ];
    //   },
    // });

    // Restore the cache with the merged data
    client.cache.restore(newData);
  }

  // For SSG and SSR always create a new Apollo Client
  if (typeof window === 'undefined') return client;

  // Create the Apollo Client once in the client
  if (!apolloClient) apolloClient = client;

  return client;
}

export function addApolloState(
  client: ApolloClient<NormalizedCacheObject>,
  pageProps: AppProps['pageProps'],
) {
  if (pageProps?.props) {
    pageProps.props[APOLLO_STATE_PROPERTY_NAME] = client.cache.extract();
  }

  return pageProps;
}

export function useApollo(pageProps: AppProps['pageProps']) {
  const state = pageProps[APOLLO_STATE_PROPERTY_NAME];
  const store = useMemo(() => initApollo(state), [state]);

  return store;
}
